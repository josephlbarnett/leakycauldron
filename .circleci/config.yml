version: 2.1
orbs:
  release: trib3/release@2.3.0

jobs:
  build:
    machine:
      image: default

    working_directory: ~/repo
    environment:
      JAVA_TOOL_OPTIONS: -XX:MaxRAM=2g

    steps:
      # get code
      - checkout
      # handle dependency caching and run build
      - restore_cache:
          keys:
            - v7-dependencies-{{ .Branch }}-{{ .Revision }}
            - v7-dependencies-{{ .Branch }}
            - v7-dependencies-
      - run:
          name: Setup GPG
          command: |
            echo $GPG_KEY | sed 's/\$/\n/g' |  gpg --import
      - run:
          name: Set JAVA_HOME for mvnw commands
          command: echo 'export JAVA_HOME=`java -XshowSettings:properties -version 2>&1 |grep java.home | sed "s/.*java\.home = //"`' >> "$BASH_ENV"
      - run:
          name: Maven Setup
          command: |
            ./mvnw --version
            mkdir -p ~/.m2
            echo $MAVEN_SETTINGS_XML > ~/.m2/settings.xml
            cd build-resources && BASE_VERSION=$(../mvnw -q  -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec|sed 's/-SNAPSHOT.*//') && cd ..
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              NEW_PROJECT_VERSION=${BASE_VERSION}.${CIRCLE_BUILD_NUM}
            else
              NEW_PROJECT_VERSION=${BASE_VERSION}-${CIRCLE_BRANCH}-SNAPSHOT
            fi
            for i in build-resources parent-pom; do
               cd $i
               ../mvnw --no-transfer-progress -U org.codehaus.mojo:versions-maven-plugin:2.7:set -DgenerateBackupPoms=false -DnewVersion=${NEW_PROJECT_VERSION}
               cd ..
            done
            echo ${NEW_PROJECT_VERSION} > ~/repo/current_version.txt
      - run:
          name: Maven Build
          command: |
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              ./mvnw install org.sonatype.central:central-publishing-maven-plugin:0.5.0:publish --no-transfer-progress -U -DskipPublishing=true
            else
              ./mvnw install --no-transfer-progress -U
            fi
      - save_cache:
          paths:
            - ~/.m2
          key: v7-dependencies-{{ .Branch }}-{{ .Revision }}
      # collect test results and upload coverage
      - run: mkdir -p ~/test_results
      - run: find . -type f -regex ".*/target/surefire-reports/junitreports/.*xml" -exec cp {} ~/test_results/ \;
      - store_test_results:
          path: ~/test_results
      - store_artifacts:
          path: ~/test_results
      - run:
          name: Upload coverage report
          command: |
            echo $CODECOV_GPG_KEY | sed 's/\$/\n/g' | gpg --import
            curl https://uploader.codecov.io/latest/linux/codecov > ~/codecov
            curl https://uploader.codecov.io/latest/linux/codecov.SHA256SUM > ~/codecov.SHA256SUM
            curl https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig > ~/codecov.SHA256SUM.sig
            cd ~
            gpg --verify codecov.SHA256SUM.sig codecov.SHA256SUM
            if [ $? -ne 0 ]; then
             echo "bad signature on codecov SHA256SUM file"
             exit 1
            fi
            shasum -a 256  -c codecov.SHA256SUM
            if [ $? -eq 0 ]; then
              chmod +x ~/codecov
              cd ~/repo
              ~/codecov -t ${CODECOV_TOKEN} -v
            else
              echo "bad checksum on codecov binary"
              exit 1
            fi
      # collect docs
      - run:
          name: Collect docs
          command: |
            mkdir -p ~/docs
            for subdir in `find . -maxdepth 1 -mindepth 1 -type d`; do
              if [ -d $subdir/target/dokka ]; then
                cp -r $subdir/target/dokka ~/docs/$subdir
              fi
            done
            mkdir -p ~/docarchive
            cd ~/docs && zip -r ~/docarchive/docs.zip .
      - store_artifacts:
          path: ~/docarchive
      # collect built packages and save to workspace for deploy
      - run: mkdir -p ~/jars
      - run: find . -type f -regex ".*/target/.*jar" -exec cp {} ~/jars/ \;
      - run: find . -type f -regex ".*/target/.*zip" -exec cp {} ~/jars/ \;
      - run: find . -type f -regex ".*/target/.*asc" -exec cp {} ~/jars/ \;
      - release/prep_release:
          release_dir: ~/jars/release
          current_version: ~/repo/current_version.txt
          current_version_import: True
      - store_artifacts:
          path: ~/jars
      - persist_to_workspace:
          root: ~/
          paths:
            - jars/.
            - repo/mvnw
            - repo/.mvn/wrapper/maven-wrapper.properties

  deploy:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Set JAVA_HOME for mvnw commands
          command: echo 'export JAVA_HOME=`java -XshowSettings:properties -version 2>&1 |grep java.home | sed "s/.*java\.home = //"`' >> "$BASH_ENV"
      - run:
          name: Complete release
          command: |
            mkdir -p ~/.m2
            cd ~/jars
            BUNDLE_ID=`curl --request POST --header "Authorization: Bearer ${MVN_UPLOAD_TOKEN}" --form bundle=@central-bundle.zip "https://central.sonatype.com/api/v1/publisher/upload?publishingType=AUTOMATIC"`
            echo $BUNDLE_ID bundle uploaded
            STATUS=`curl --request POST --header "Authorization: Bearer ${MVN_UPLOAD_TOKEN}" "https://central.sonatype.com/api/v1/publisher/status?id=$BUNDLE_ID" | jq -r .deploymentState`
            while [ "$STATUS" != "PUBLISHED" -a "$STATUS" != "FAILED" ]; do
               echo $STATUS
               sleep 10
               STATUS=`curl --request POST --header "Authorization: Bearer ${MVN_UPLOAD_TOKEN}" "https://central.sonatype.com/api/v1/publisher/status?id=$BUNDLE_ID" | jq -r .deploymentState`
            done
            if [ "$STATUS" != "PUBLISHED" ]; then
               echo "Bad publishing status: $STATUS"
               exit 1
            fi

            
      - release/execute_release:
          release_dir: ~/jars/release

workflows:
  version: 2.1
  build_pipeline:
    jobs:
      - build:
          context: terraform
      - hold:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - main
      - deploy:
          requires:
            - hold
          filters:
            branches:
              only:
                - main
